import java.util.regex.Pattern

group 'CityManagement'
version '0.5.1-master-b1'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def incrementBuildNumber() {
    println(":incrementVersion - Incrementing Build Number...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def patchVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def branchName = matcherVersionNumber.group(4)
    def buildNumber = Integer.parseInt(matcherVersionNumber.group(5))
    def mVersionName = majorVersion + "." + minorVersion + "." + patchVersion + "-" + branchName + "-b" + buildNumber
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (patchVersion + 1) + "-" + branchName + "-b" + (buildNumber + 1)
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersion - Old version: " + mVersionName);
    println(":incrementVersion - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}

def incrementPatchVersion() {
    println(":incrementVersion - Incrementing Patch Version...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def patchVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def branchName = matcherVersionNumber.group(4)
    def buildNumber = Integer.parseInt(matcherVersionNumber.group(5))
    def mVersionName = majorVersion + "." + minorVersion + "." + patchVersion + "-" + branchName + "-b" + buildNumber
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (patchVersion + 1) + "-" + branchName + "-b1"
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersion - Old version: " + mVersionName);
    println(":incrementVersion - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}

def incrementMinorVersion() {
    println(":incrementVersion - Incrementing Minor Version...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def patchVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def branchName = matcherVersionNumber.group(4)
    def buildNumber = Integer.parseInt(matcherVersionNumber.group(5))
    def mVersionName = majorVersion + "." + minorVersion + "." + patchVersion + "-" + branchName + "-b" + buildNumber
    def mNextVersionName = majorVersion + "." + (minorVersion + 1) + ".0-" + branchName + "-b1"
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersion - Old version: " + mVersionName);
    println(":incrementVersion - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}

def incrementMajorVersion() {
    println(":incrementVersion - Incrementing Major Version...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def patchVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def branchName = matcherVersionNumber.group(4)
    def buildNumber = Integer.parseInt(matcherVersionNumber.group(5))
    def mVersionName = majorVersion + "." + minorVersion + "." + patchVersion + "-" + branchName + "-b" + buildNumber
    def mNextVersionName = (majorVersion + 1) + ".0.0-" + branchName + "-b1"
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersion - Old version: " + mVersionName);
    println(":incrementVersion - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}

//noinspection GroovyAssignabilityCheck
task updateMajor() << {
    incrementMajorVersion()
}
//noinspection GroovyAssignabilityCheck
task updateMinor() << {
    incrementMinorVersion()
}
//noinspection GroovyAssignabilityCheck
task updatePatch() << {
    incrementPatchVersion()
}
//noinspection GroovyAssignabilityCheck
task updateBuild() << {
    incrementBuildNumber()
}
//noinspection GroovyAssignabilityCheck
task update() << {
    println(":update - What type of update would you like? (major, minor, patch, build)")
    println(":update - Enter a number 1-3 that corresponds to the above")
    println(":update - Anything that is not a number will act as if it was a 4 (build)")
    def type = System.in.newReader().readLine()
    switch (type) {
        case "1":
            incrementMajorVersion()
            break
        case "2":
            incrementMinorVersion()
            break
        case "3":
            incrementPatchVersion()
            break
        default:
            incrementBuildNumber()
    }
}

//noinspection GroovyAssignabilityCheck
task renameBranch << {
    println(":renameBranch - Enter new branch name:")
    def name = System.in.newReader().readLine()
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def patchVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def branchName = matcherVersionNumber.group(4)
    def buildNumber = Integer.parseInt(matcherVersionNumber.group(5))
    def mVersionName = majorVersion + "." + minorVersion + "." + patchVersion + "-" + name + "-b" + buildNumber
    def buildContent = matcherVersionNumber.replaceAll("version '" + mVersionName + "'")
    buildFile.write(buildContent)
    println(":renameBranch - Branch renamed")
    println(":renameBranch - New version: " + mVersionName)
}

//noinspection GroovyAssignabilityCheck
task version << {
    println(version)
}