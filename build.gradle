import java.util.regex.Pattern

group 'CityManagement'
version '0.5.4-master-b4'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def incrementBuildNumber() {
    println(":incrementVersion - Incrementing Build Number...")
    incrementVersion(true, false, false, false, null)
    incrementVersion(false, false, false, false, null)
}

def incrementPatchVersion() {
    println(":incrementVersion - Incrementing Patch Version...")
    incrementVersion(true, false, false, true, null)
    incrementVersion(false, false, false, true, null)
}

def incrementMinorVersion() {
    println(":incrementVersion - Incrementing Minor Version...")
    incrementVersion(true, false, true, false, null)
    incrementVersion(false, false, true, false, null)
}

def incrementMajorVersion() {
    println(":incrementVersion - Incrementing Major Version...")
    incrementVersion(true, true, false, false, null)
    incrementVersion(false, true, false, false, null)
}

def incrementVersion(Boolean inBuildGradle, Boolean major, Boolean minor, Boolean patch, String branch) {
    println()
    if (major) {
        println(":incrementVersion - Incrementing Major Version...")
    } else if (minor) {
        println(":incrementVersion - Incrementing Minor Version...")
    } else if (patch) {
        println(":incrementVersion - Incrementing Patch Version...")
    } else {
        println(":incrementVersion - Incrementing Build Number...")
    }
    println(":incrementVersion - In " + (inBuildGradle ? "build.gradle" : "Main.java"))

    def file = file(inBuildGradle ? "build.gradle" : "src/main/java/com/samgauck/CityManagement/Main.java")
    def patternVersionNumber = Pattern.compile(inBuildGradle ? "version '(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)'" : "\"(\\d+)\\.(\\d+)\\.(\\d+)-(.+)-b(\\d+)\"")
    def text = file.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(text)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def patchVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def branchName = matcherVersionNumber.group(4)
    def buildNumber = Integer.parseInt(matcherVersionNumber.group(5))
    def newMajor = majorVersion + (major ? 1 : 0)
    def newMinor = newMajor == majorVersion ? minorVersion + (minor ? 1 : 0) : 0
    def newPatch = (newMajor == majorVersion && newMinor == minorVersion) ? patchVersion + (patch ? 1 : 0) : 0
    def newBranchName = branch == null ? branchName : branch
    def newBuild = (newMajor == majorVersion && newMinor == minorVersion && newPatch == patchVersion) && branch == null ? buildNumber + 1 : 1
    def newVersion = newMajor + "." + newMinor + "." + newPatch + "-" + newBranchName + "-b" + newBuild
    println(":incrementVersion - Old version: " + majorVersion + "." + minorVersion + "." + patchVersion + "-" + branchName + "-b" + buildNumber)
    println(":incrementVersion - New version: " + newVersion)
    println()
    def content = matcherVersionNumber.replaceAll(inBuildGradle ? "version '" + newVersion + "'" : "\"" + newVersion + "\"")
    file.write(content)
}

//noinspection GroovyAssignabilityCheck
task updateMajor() << {
    incrementMajorVersion()
}
//noinspection GroovyAssignabilityCheck
task updateMinor() << {
    incrementMinorVersion()
}
//noinspection GroovyAssignabilityCheck
task updatePatch() << {
    incrementPatchVersion()
}
//noinspection GroovyAssignabilityCheck
task updateBuild() << {
    incrementBuildNumber()
}
//noinspection GroovyAssignabilityCheck
task update(dependsOn: ':version') << {
    println(":update - What type of update would you like? (major, minor, patch, build)")
    println(":update - Enter a number 1-4 that corresponds to the above")
    println(":update - Anything that is not a number will act as if it was a 4 (build)")
    def type = System.in.newReader().readLine()
    switch (type) {
        case "1":
            incrementMajorVersion()
            break
        case "2":
            incrementMinorVersion()
            break
        case "3":
            incrementPatchVersion()
            break
        default:
            incrementBuildNumber()
    }
}

//noinspection GroovyAssignabilityCheck
task renameBranch << {
    println(":renameBranch - Enter new branch name:")
    def name = System.in.newReader().readLine()
    incrementVersion(true, false, false, false, name)
    incrementVersion(false, false, false, false, name)
}

//noinspection GroovyAssignabilityCheck
task version << {
    println(version)
}

//noinspection GroovyAssignabilityCheck
task testing << {
    //Whatever
}