import java.util.regex.Pattern

group 'CityManagement'
version '1.0.0'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//noinspection GroovyAssignabilityCheck
task incrementPointVersion << {
    println(":incrementVersionName - Incrementing Version...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersionName - Old version: " + mVersionName);
    println(":incrementVersionName - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}

//noinspection GroovyAssignabilityCheck
task incrementMinorVersion << {
    println(":incrementVersionName - Incrementing Version...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = majorVersion + "." + (minorVersion + 1) + "." + pointVersion
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersionName - Old version: " + mVersionName);
    println(":incrementVersionName - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}

//noinspection GroovyAssignabilityCheck
task incrementMajorVersion << {
    println(":incrementVersionName - Incrementing Version...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildText = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = (majorVersion + 1) + "." + minorVersion + "." + pointVersion
    def buildContent = matcherVersionNumber.replaceAll("version '" + mNextVersionName + "'")
    println(":incrementVersionName - Old version: " + mVersionName);
    println(":incrementVersionName - New version: " + mNextVersionName);
    buildFile.write(buildContent)
}